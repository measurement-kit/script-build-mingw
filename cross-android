#!/bin/sh
set -e
ROOTDIR=$(cd $(dirname $0) && pwd -P)

if [ $# -lt 1 ]; then
  echo "Usage: $0 ARCH [command [arguments...]]" 1>&2
  echo "" 1>&2
  echo "  ARCH: armeabi-v7a, arm64, x86, x86_64" 1>&2
  echo "" 1>&2
  echo "Example usage:" 1>&2
  echo " $0 arm64" 1>&2
  exit 1
fi
ARCH=$1
shift 

# Place where toolchain-android creates a standalone toolchain
export ANDROID_TOOLCHAIN=${ROOTDIR}/MK_BUILD/toolchain/android/${ARCH}

# Directory under the toolchain where we have headers and libs
export SYSROOT=${ANDROID_TOOLCHAIN}/sysroot

#
# Map the selected architecture to useful variables:
#
# TOOLCHAIN_NAME: name of the toolchain to use.
# DESTDIR_NAME: name of the directory where to install headers and libs.
# ANDROID_ARCH_FLAGS: specific flags to be passed to C/C++ compiler.
# LIB_SUFFIX: unset unless toolchain has lib64 libs directory.
#
if [ "$ARCH" = "arm64" ]; then
  # Note: arm64 is also known as aarch64 and as armv8
  TOOLCHAIN_NAME=aarch64-linux-android
  DESTDIR_NAME=arm64-v8a
elif [ "$ARCH" = "armeabi-v7a" ]; then
  TOOLCHAIN_NAME=arm-linux-androideabi
  DESTDIR_NAME=$ARCH
  #
  # <Bandwagon>These flags have been copied from the flags used by
  # ndk-build when building measurement-kit as a C++ library</>.
  #
  ANDROID_ARCH_FLAGS="-target armv7-none-linux-androideabi -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -mthumb"
elif [ "$ARCH" = "x86" ]; then
  TOOLCHAIN_NAME=i686-linux-android
  DESTDIR_NAME=x86
elif [ "$ARCH" = "x86_64" ]; then
  TOOLCHAIN_NAME=x86_64-linux-android
  DESTDIR_NAME=x86_64
  LIB_SUFFIX=64
else
  echo "$0: invalid $ARCH" 1>&2
  exit 1
fi

# Override makefile's defaults with toolchain's tools. We use clang.
TOOL_PREFIX=${ANDROID_TOOLCHAIN}/bin/${TOOLCHAIN_NAME}
export CPP=${TOOL_PREFIX}-cpp
export AR=${TOOL_PREFIX}-ar
export AS=${TOOL_PREFIX}-as
export NM=${TOOL_PREFIX}-nm
export CC=${TOOL_PREFIX}-clang
export CXX=${TOOL_PREFIX}-clang++
export LD=${TOOL_PREFIX}-ld
export RANLIB=${TOOL_PREFIX}-ranlib
export STRIP=${TOOL_PREFIX}-strip

# Teach the preprocessor to find toolchain includes
export CPPFLAGS="--sysroot=${SYSROOT} -I${SYSROOT}/usr/include -I${ANDROID_TOOLCHAIN}/include ${CPPFLAGS}"

# Pass specific flags to the C and/or CXX compiler
export CFLAGS="-O2 ${ANDROID_ARCH_FLAGS} ${CFLAGS}"
export CXXFLAGS="-O2 ${ANDROID_ARCH_FLAGS} ${CXXFLAGS}"

# Teach the linker to find toolchain libraries
export LDFLAGS="-L${SYSROOT}/usr/lib${LIB_SUFFIX} -L${ANDROID_TOOLCHAIN}/lib ${LDFLAGS}"

# Tell configure to use the toolchain
export PKG_CONFIGUREFLAGS="--host=${TOOLCHAIN_NAME}"

# Tell the script that we are cross compiling
export PKG_OS="android"

# Tell the script the name of the cross architecture
export PKG_ARCH="${DESTDIR_NAME}"

if [ $# -gt 0 ]; then
  $@
else
  env
fi
